type: edu
files:
- name: src/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Hello, World!</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the hstest/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');

    const hs = require('hs-test-web');

    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args:['--start-maximized']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        page.on('console', msg => console.log(msg.text()));

        let selector = 'button[class="open-window"]';
        page.evaluate((selector) => document.querySelector(selector).click(), selector);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - check if the document has the header
            () => {
                let headers = document.getElementsByTagName('header');

                if (headers === null || headers.length === 0) {
                    return hs.wrong('Cannot find the header in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one header in the document.');
                }

                return hs.correct();
            },

            // Test #2 - check if the document has at least one <nav> element
            () => {
                let nav = document.getElementsByTagName('nav');

                if (nav === null || nav.length === 0) {
                    return hs.wrong('Cannot find the nav element on your web page.');
                }

                return hs.correct();
            },

            // Test #3 - check if the document has the <h1> element
            () => {
                let headings1 = document.getElementsByTagName('h1');

                if (headings1 === null || headings1.length === 0) {
                    return hs.wrong('Cannot find h1 element on your web page.');
                }

                let header = headings1[0]
                let title = header.textContent || header.innerText;

                if (!title || title.length === 0) {
                    return hs.wrong('Cannot find a text within h1 element');
                }

                return hs.correct();
            },

            // Test #4 - check if the document has the <h1> element
            () => {
                let html = document.getElementsByTagName('html')[0];

                let margin = window.getComputedStyle(html).margin;
                if (margin !== '0px') {
                    return hs.wrong('It seems that you have not reset the default margin property');
                }

                let padding = window.getComputedStyle(html).padding;
                if (padding !== '0px') {
                    return hs.wrong('It seems that you have not reset the default padding property');
                }

                return hs.correct();
            },

            // Test #5 - check if the document has the <footer> element
            () => {
                let footers = document.getElementsByTagName('footer');

                if (footers === null || footers.length === 0) {
                    return hs.wrong('Cannot find the footer in the document.');
                } else if (footers.length > 1) {
                    return hs.wrong('Found more than one footer in the document.');
                }

                return hs.correct();
            },

            // Test #6 - check if the document has at least three section elements
            () => {
                let sections = document.getElementsByTagName('section');

                if (sections === null || sections.length < 3) {
                    return hs.wrong(`Cannot find tree sections elements. There are only ${sections.length}.`);
                }

                return hs.correct();
            },

            // Test #7 - check the "about me" section
            () => {
                let sections = document.getElementById('about');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "about" id.');
                }

                return hs.correct();
            },

            // Test #8 - check the "portfolio" section
            () => {
                let sections = document.getElementById('portfolio');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "portfolio" id.');
                }

                return hs.correct();
            },

            // Test #9 - check the "contacts" section
            () => {
                let sections = document.getElementById('contacts');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "contacts" id.');
                }

                return hs.correct();
            },

            // Test #10 - check header and footer background colors
            () => {
                function getRealColor(elem) {
                    try {
                        while (elem) {
                            let color = window.getComputedStyle(elem).backgroundColor;
                            if (color !== "rgba(0, 0, 0, 0)") {
                                let match = color.match(/^rgba?\((\d+), (\d+), (\d+)(, [\d.]+)?\)$/i);
                                return {
                                    red: Number(match[1]),
                                    green: Number(match[2]),
                                    blue: Number(match[3]),
                                    hex: Number(match[1]) * 65536 + Number(match[2]) * 256 + Number(match[3])
                                };
                            }
                            elem = elem.parentElement;
                        }
                    } catch (e) {
                        return null;
                    }
                    return null;
                }

                let headers = document.getElementsByTagName('header');

                if (headers === null || headers.length === 0) {
                    return hs.wrong('Cannot find the header in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one header in the document.');
                }

                let hasBackgroundImage = getComputedStyle(headers[0]).background.includes('url');

                let headerBack = getRealColor(headers[0]);
                let noCustomHeaderColor = headerBack === null || headerBack.hex === 0xFFFFFF;
                if (noCustomHeaderColor && !hasBackgroundImage) {
                    return hs.wrong("Looks like header's background color is not set. " +
                        "It should be an image or some non-white color.")
                }

                let footers = document.getElementsByTagName('footer');

                if (footers === null || footers.length === 0) {
                    return hs.wrong('Cannot find the footer in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one footer in the document.');
                }

                hasBackgroundImage = getComputedStyle(footers[0]).background.includes('url');

                let footerBack = getRealColor(footers[0]);
                let noCustomFooterColor = footerBack === null || footerBack.hex === 0xFFFFFF;
                if (noCustomFooterColor && !hasBackgroundImage) {
                    return hs.wrong("Looks like footer's background color is not set. " +
                        "It should be an image or some non-white color.")
                }

                return hs.correct()
            },

            // Test #11 - check click button and show popup window
            () => {
                let buttons = document.getElementsByClassName('open-window');

                if (buttons === null || buttons.length === 0) {
                    return hs.wrong('Cannot find a button with the class "open-window" to open the pop-up window.');
                }

                let forms = document.getElementsByClassName('window');

                if (forms === null || forms.length === 0) {
                    return hs.wrong('Cannot find the element with the class "window".');
                }

                return hs.correct()
            },

            // Test #12 -  check that the page has a hamburger menu
            () => {
                let buttons = document.getElementsByClassName('hamburger');

                if (buttons === null || buttons.length === 0) {
                    return hs.wrong('Not find the hamburger menu on your page. Create it and set the "hamburger" class to the tag that wraps the menu elements.');
                }

                return hs.correct()
            },

            // Test #13
            () => {
                let burger = document.getElementsByClassName('hamburger')[0];

                let display = window.getComputedStyle(burger).display;
                let visibility = window.getComputedStyle(burger).visibility;

                if (window.innerWidth >= 900 && (display === 'none' || visibility === 'hidden')) {
                    return hs.correct()
                }

                return hs.wrong('The menu must not be hamburger when the screen width >= 900 px');
            }
        );

        await browser.close();
        return result;
    }


    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/style.css
  visible: true
  text: |
    @media screen and (max-width: 980px){

    }
    html, body{
        margin: 0;
        padding: 0
    }

    body{
        background-color: #254862;
        display: grid;
        grid-template-columns: 1fr 4fr 1fr;

    }

    .header{
        display: grid;
        height: 100px;
        grid-column: 2;
        position: fixed;
        width: 100%;
        background-color: #0a4254;
        align-items: center;
        justify-items: end;
        z-index: 10;
    }
    nav>a{
        color: snow;
        text-decoration: none;
        margin-right: 25px;
        font-size: 25px;
    }
    nav>a:hover{
        color: cadetblue;
    }

    main{
        margin-top: 100px;
        display: grid;
        grid-template-rows: minmax(200px, auto) minmax(100px, 1fr) minmax(200px, auto) 100px;
        grid-column: 2;

    }

    .home{
        display: grid;
        background-color: #254862;
        align-items: end;
        padding: 25px;
    }
    h1{
        color: snow;
        font-size: 50px;
    }
    .text{
        color: snow;
        font-size: 20px;
        font-style: italic;
        text-align: justify;
    }

    .about{
        background-color: #6c9d6c;
        display: grid;
        grid-template-columns: auto 1fr;
        column-gap: 25px;
        padding: 25px;
        align-items: center;
    }
    .about>img{
        width: 300px;
        height: 300px;
    }

    .portfolio{
        display: grid;
        background-color: #2d5346;
        grid-template-columns: 1fr auto;
        grid-template-rows: auto auto;
        column-gap: 25px;
        padding: 25px;
    }
    .portfolio>img{
        align-self: center;
        width: 300px;
    }
    #modal1, #modal2{
        position: fixed;
        left: 0;
        top: 0;
        display: none;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.7);
        justify-content: center;
        align-items: center;
        z-index: 20;
        overflow: auto;
    }
    .modal-content{
        width: 100%;
        height: 100%;
        max-width: 400px;
        max-height: 400px;
        background-color: #3f27ba;
        padding: 30px;
        text-align: justify;
    }

    .contacts{
        background-color: #254862;
        display: grid;
        justify-items: center;
        align-items: center;
        color: snow;
        font-size: 20px;
    }
    .contacts a{
        color: snow;
    }

    footer{
        display: grid;
        min-height: 50px;
        grid-column: 2;
        background-color: #0a4254;
        align-items: center;
        justify-items: center;
        color: snow;
    }

    @media screen and (max-width: 768px) {
        nav{
            top: 100px;
            justify-content: left;
        }
    }
  learner_created: true
- name: src/script.js
  visible: true
  text: |+
    let modal1 = document.getElementById('modal1');
    let modal2 = document.getElementById('modal2');
    let openButton1 = document.getElementById('open1');
    let openButton2 = document.getElementById('open2');
    let closeButton1 = document.getElementById('close1');
    let closeButton2 = document.getElementById('close2');

    openButton1.onclick = function () {
        modal1.style.display = 'flex';
    };
    openButton2.onclick = function () {
        modal2.style.display = 'flex';
    };
    closeButton1.onclick = function () {
        modal1.style.display= 'none';
    };
    closeButton2.onclick = function () {
        modal2.style.display= 'none';
    };
    window.onclick = function (event) {
        if (event.target === modal1) {modal1.style.display = 'none';
        }
        if (event.target === modal2) {modal2.style.display = 'none';
        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/projects/137/stages/734/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 21 Mar 2021 15:54:20 UTC
record: -1
